using Ginox.BlackCauldron.Core.Editor;
using System;
using UnityEditor;
using UnityEngine;

namespace Ginox.BlackCauldron.Books.Editor
{
    public class CreateBookWindow : EditorWindow
    {
        private static readonly string BOOKS_PATH = Environment.CurrentDirectory + "\\" + "Assets\\Black Cauldron\\Books\\Scripts\\";
        private static readonly string VIEW_MODELS_PATH = BOOKS_PATH + "ViewModels\\";
        private static readonly string VIEWS_PATH = BOOKS_PATH + "Views\\";
        private static readonly string MODELS_PATH = BOOKS_PATH + "Models\\";

        private string bookName;

        [MenuItem("Code Generation/Create book")]
        static void ShowWindow()
        {
            GetWindow<CreateBookWindow>("Create book");
        }

        private void OnGUI()
        {
            bookName = GUILayout.TextField(bookName);
            if (GUILayout.Button("Create"))
                Generate(bookName);
        }

        public void Generate(string bookName)
        {
            var book = ParseName.Parse(bookName);
            var viewModelClassName = $"{book}ViewModel";
            var viewClassName = $"{book}View";

            var viewModel =
$@"//<auto-generated/>
using Ginox.BlackCauldron.Books.Models;

namespace Ginox.BlackCauldron.Books.ViewModels
{{
    public class {viewModelClassName} : ABookViewModel
    {{
        public {viewModelClassName}({book} model)
        {{
            Model = model;
        }}
    }}
}}
";

            var view =
$@"//<auto-generated/>
using Ginox.BlackCauldron.Books.ViewModels;
using Zenject;

namespace Ginox.BlackCauldron.Books.Views
{{
    public class {viewClassName} : ABookView
    {{
        [Inject]
        private void Init({viewModelClassName} viewModel)
        {{
            base.Init(viewModel);
        }}
    }}
}}
";
            var model =
$@"//<auto-generated/>
using Ginox.BlackCauldron.Alchemy.Models;
using System.Collections.Generic;

namespace Ginox.BlackCauldron.Books.Models
{{
    public class {book} : ABook
    {{
        public override string NameKey {{ get; }} = nameof({book});

        public override List<Recipe> Recipes {{ get; }} = new();
    }}
}}
";
            ClassFile.SaveClassFile(viewModelClassName, VIEW_MODELS_PATH, viewModel);
            ClassFile.SaveClassFile(viewClassName, VIEWS_PATH, view);
            ClassFile.SaveClassFile(book, MODELS_PATH, model);
        }
    }
}
