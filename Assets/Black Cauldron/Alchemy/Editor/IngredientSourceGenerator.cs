using System;
using System.IO;
using System.Linq;
using UnityEngine;

namespace Ginox.BlackCauldron.Alchemy.Editor
{
    public class IngredientSourceGenerator
    {
        private static readonly string ALCHEMY_PATH = Environment.CurrentDirectory + "\\" + "Assets\\Black Cauldron\\Alchemy\\Scripts\\";
        private static readonly string INGREDIENTS_PATH = "Ingredients\\";
        private static readonly string MODELS_PATH = ALCHEMY_PATH + "Models\\" + INGREDIENTS_PATH;
        private static readonly string VIEWS_PATH = ALCHEMY_PATH + "Views\\" + INGREDIENTS_PATH;
        private static readonly string CONTROLLERS_PATH = ALCHEMY_PATH + "Controllers\\" + INGREDIENTS_PATH;

        public void Generate(string ingredientName)
        {
            var ingredient = ingredientName;

            var words = ingredientName.Split(' ');

            var capitalizedWords = words.Select(word => word.First().ToString().ToUpper() + word.Substring(1).ToLower());
            ingredient = string.Join("", capitalizedWords);
            ingredient = ingredient.Replace(" ", string.Empty);

            var modelClassName = ingredient;
            var viewClassName = $"{ingredient}View";
            var controllerClassName = $"{ingredient}Controller";

            var model = 
$@"//<auto-generated/>
namespace Ginox.BlackCauldron.Alchemy.Models.Ingredients
{{
    public class {modelClassName} : AIngredient
    {{
        public override string NameKey => nameof({ingredient});
    }}
}}
";

            var view = 
$@"//<auto-generated/>
using Ginox.BlackCauldron.Alchemy.Controllers.Ingredients;
using Zenject;

namespace Ginox.BlackCauldron.Alchemy.Views.Ingredients
{{
    public class {viewClassName} : AIngredientView
    {{
        [Inject]
        private void Init({controllerClassName} controller)
        {{
            base.Init(controller);
        }}
    }}
}}
";

            var controller =
$@"//<auto-generated/>
using Ginox.BlackCauldron.Alchemy.Models.Ingredients;

namespace Ginox.BlackCauldron.Alchemy.Controllers.Ingredients
{{
    public class {controllerClassName} : AIngredientController
    {{
        public {controllerClassName}({modelClassName} model) : base(model)
        {{
        }}
    }}
}}
";

            SaveClassFile(modelClassName, MODELS_PATH, model);
            SaveClassFile(viewClassName, VIEWS_PATH, view);
            SaveClassFile(controllerClassName, CONTROLLERS_PATH, controller);

            Debug.Log($"{ingredient} was created");
        }

        private void SaveClassFile(string name, string path, string code)
        {
            var file = $@"{name}.cs";
            var filePath = path + file;

            File.WriteAllText(filePath, code);
            File.SetAttributes(filePath, FileAttributes.Normal);
        }
    }
}
